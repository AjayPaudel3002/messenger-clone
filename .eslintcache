[{"/home/paudel/messenger-clone/src/index.js":"1","/home/paudel/messenger-clone/src/App.js":"2","/home/paudel/messenger-clone/src/components/Messenger.js":"3","/home/paudel/messenger-clone/src/components/Login.js":"4","/home/paudel/messenger-clone/src/PublicRoute.js":"5","/home/paudel/messenger-clone/src/PrivateRoute.js":"6","/home/paudel/messenger-clone/src/components/ChatHistory.js":"7","/home/paudel/messenger-clone/src/components/MessageScreen.js":"8","/home/paudel/messenger-clone/src/components/auth/headers.js":"9","/home/paudel/messenger-clone/src/components/People.js":"10","/home/paudel/messenger-clone/src/components/PrivateChat.js":"11","/home/paudel/messenger-clone/src/components/Nav.js":"12","/home/paudel/messenger-clone/src/components/SenderChat.js":"13","/home/paudel/messenger-clone/src/components/ReceiverChat.js":"14"},{"size":241,"mtime":1608654788799,"results":"15","hashOfConfig":"16"},{"size":2013,"mtime":1611018205084,"results":"17","hashOfConfig":"16"},{"size":2817,"mtime":1610949089189,"results":"18","hashOfConfig":"16"},{"size":2848,"mtime":1611018571192,"results":"19","hashOfConfig":"16"},{"size":739,"mtime":1608664190230,"results":"20","hashOfConfig":"16"},{"size":647,"mtime":1608654140136,"results":"21","hashOfConfig":"16"},{"size":614,"mtime":1610644597730,"results":"22","hashOfConfig":"16"},{"size":8110,"mtime":1610949102101,"results":"23","hashOfConfig":"16"},{"size":338,"mtime":1608663517748,"results":"24","hashOfConfig":"16"},{"size":1771,"mtime":1610648148269,"results":"25","hashOfConfig":"16"},{"size":4294,"mtime":1610949425986,"results":"26","hashOfConfig":"16"},{"size":1786,"mtime":1610950920744,"results":"27","hashOfConfig":"16"},{"size":5173,"mtime":1610947827160,"results":"28","hashOfConfig":"16"},{"size":3483,"mtime":1610941256010,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1908zkx",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"32"},"/home/paudel/messenger-clone/src/index.js",[],["67","68"],"/home/paudel/messenger-clone/src/App.js",[],"/home/paudel/messenger-clone/src/components/Messenger.js",["69"],"import React, { useState, useEffect } from \"react\";\nimport ChatHistory from \"./ChatHistory\";\nimport headers from \"./auth/headers\";\nimport Nav from \"./Nav\";\n\nconst Messenger = ({ socket, authenticated, setAuthenticated, domain }) => {\n  const [userDetails, setUserDetails] = useState({});\n  const [onlineUsers, setOnlineUsers] = useState([]);\n\n  useEffect(() => {\n    const getUserInfo = async () => {\n      try {\n        const response = await fetch(`${domain}/api/user-details`, {\n          mode: \"cors\",\n          headers: headers(),\n        });\n        const res = await response.json();\n        // console.log(res);\n        setUserDetails(res.data || {});\n        socket.emit(\"connection\", res.data._id);\n        socket.emit(\"getOnlineUsers\", res.data._id);\n        socket.on(\"getOnlineUsers\", (data) => {\n          // console.log(data);\n          setOnlineUsers([...data]);\n        });\n        socket.on(\"connection\", (data) => {\n          // console.log(data);\n          setOnlineUsers(data);\n        });\n\n        socket.on(\"disconnectedUser\", (data) => {\n          // console.log(data, \"dis\");\n          // console.log(res.data, \"ou\");\n          socket.emit(\"getOnlineUsers\", res.data._id);\n          socket.on(\"getOnlineUsers\", (userData) => {\n            // console.log(userData);\n            setOnlineUsers(userData);\n          });\n          //   console.log(activeUsers);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getUserInfo();\n  }, [userDetails._id, socket]);\n\n  // console.log(onlineUsers);\n  return (\n    <>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-4 border \" style={{ height: \"750px\" }}>\n            <div className=\"Nav pb-3\">\n              <Nav\n                user={userDetails}\n                authenticated={authenticated}\n                setAuthenticated={setAuthenticated}\n              />\n            </div>\n\n            <div className=\"row chat-history\">\n              <ChatHistory\n                friends={userDetails.friends}\n                socket={socket}\n                userId={userDetails._id}\n                activeUsers={onlineUsers}\n                domain={domain}\n              />\n            </div>\n          </div>\n          <div\n            className=\"col-md-8 border d d-flex justify-content-center align-items-center\"\n            style={{ padding: \"0 10px 0 0\", height: \"750px\" }}\n          >\n            <div className=\"text-center\">\n              <img\n                src=\"https://res.cloudinary.com/dueq2a3w1/image/upload/c_scale,w_300/v1610612447/messenger_udzp4o.png\"\n                className=\"image-responsive center-block\"\n                alt=\"\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Messenger;\n","/home/paudel/messenger-clone/src/components/Login.js",["70","71"],"/home/paudel/messenger-clone/src/PublicRoute.js",["72"],"import React, { useState, useEffect } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nfunction PublicRoute({ render: Component, ...props }) {\n  const [authenticated, setAuthenticated] = useState(null);\n  const [user, setUser] = useState(\"\");\n\n  useEffect(() => {\n    const userValue = localStorage.getItem(\"user\");\n    setUser(JSON.parse(userValue));\n    if (userValue) {\n      setAuthenticated(true);\n    } else {\n      setAuthenticated(false);\n    }\n  }, []);\n  if (authenticated === null) {\n    return <></>;\n  }\n\n  return (\n    <Route\n      {...props}\n      render={(props) =>\n        authenticated ? <Redirect to={`/messages`} /> : <Component {...props} />\n      }\n    ></Route>\n  );\n}\n\nexport default PublicRoute;\n","/home/paudel/messenger-clone/src/PrivateRoute.js",[],"/home/paudel/messenger-clone/src/components/ChatHistory.js",[],"/home/paudel/messenger-clone/src/components/MessageScreen.js",["73","74","75"],"import React, { useState, useEffect } from \"react\";\nimport \"./Styles.css\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport headers from \"./auth/headers\";\nimport { useHistory } from \"react-router-dom\";\nimport SenderChat from \"./SenderChat\";\nimport ReceiverChat from \"./ReceiverChat\";\nimport moment from \"moment\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport VideocamIcon from \"@material-ui/icons/Videocam\";\nimport InfoIcon from \"@material-ui/icons/Info\";\n\nconst MessageScreen = ({ receiver, socket, user, activeUsers, domain }) => {\n  const history = useHistory();\n  const [message, setMessage] = useState(\"\");\n  const [chat, setChat] = useState([]);\n  const [activeStatus, setActiveStatus] = useState(null);\n  const [messageStatus, setMessageStatus] = useState(\"sent\");\n  const [typing, setTyping] = useState(false);\n\n  useEffect(() => {\n    const getMessage = async () => {\n      try {\n        const response = await fetch(\n          `${domain}/api/private-message/${receiver[0]._id}`,\n          {\n            mode: \"cors\",\n            headers: headers(),\n          }\n        );\n        const res = await response.json();\n        // console.log(res);\n        setChat(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (receiver[0]) {\n      getMessage();\n      const isUser =\n        activeUsers &&\n        activeUsers.find((user) => user.currentUserId === receiver[0]._id);\n\n      if (isUser) {\n        setActiveStatus(isUser.lastActive);\n      } else {\n        setActiveStatus(null);\n      }\n    }\n\n    socket.on(\"newMessage\", (msg) => {\n      setChat((chat) => {\n        const isAvailable = chat.find((message) => {\n          return message._id === msg._id;\n        });\n\n        if (\n          !isAvailable &&\n          receiver &&\n          receiver[0] &&\n          msg.from._id === receiver[0]._id\n        ) {\n          return [...chat, msg];\n        } else {\n          return [...chat];\n        }\n      });\n    });\n\n    socket.on(\"typing\", (data) => {\n      // console.log(data , user , receiver)\n      if (\n        receiver[0] &&\n        data.user === receiver[0]._id &&\n        data.receiver === user._id\n      ) {\n        setTyping(true);\n        setTimeout(() => {\n          setTyping(false);\n        }, 5000);\n      } else {\n        setTyping(false);\n      }\n    });\n  }, [receiver, activeUsers]);\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    // console.log(message);\n    if (message) {\n      const msgData = {\n        from: user._id,\n        to: receiver[0]._id,\n        message,\n        messageStatus,\n      };\n      // console.log(msgData);\n      try {\n        const response = await fetch(\n          `${domain}/api/add-message/${receiver[0]._id}`,\n          {\n            mode: \"cors\",\n            headers: headers(),\n            method: \"post\",\n            body: JSON.stringify(msgData),\n          }\n        );\n        const res = await response.json();\n        // console.log(res);\n        setChat((chat) => [...chat, res.data]);\n        const messageDetials = {\n          message: res.data,\n          location: history.location.pathname,\n        };\n        socket.emit(\"createMessage\", res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      alert(\"Please Enter some message\");\n    }\n    setMessage(\"\");\n  };\n\n  const getActiveUser = () => {\n    // console.log(activeStatus);\n    if (activeStatus === \"current\") {\n      return <small style={{ color: \"#65676b\" }}>Active Now</small>;\n    }\n    if (activeStatus === null) {\n      return;\n    }\n    if (activeStatus !== \"current\") {\n      return moment.utc(new Date(activeStatus)).fromNow();\n    }\n  };\n\n  const getTyping = () => {\n    const data = {\n      user: user._id,\n      receiver: receiver[0]._id,\n    };\n    socket.emit(\"typing\", data);\n    console.log(data, receiver, user);\n  };\n\n  return (\n    <>\n      <div className=\"container-fluid\">\n        <div class=\"row message-screen\">\n          <div class=\"col-md-12 mx-auto message\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div className=\"row d-flex align-items-center p-2 message-screen-header\">\n                  <div className=\"col-1  d-block d-md-none \">\n                    <ArrowBackIcon onClick={() => history.push(`/messages`)} />\n                  </div>\n                  <div className=\"col-2 col-md-1\">\n                    <img\n                      src={\n                        receiver && receiver[0] && receiver[0].profilePicture\n                          ? receiver[0].profilePicture\n                          : \"https://res.cloudinary.com/dueq2a3w1/image/upload/v1608046828/default-image1_w8javi.jpg\"\n                      }\n                      alt=\"\"\n                      className=\"rounded-circle\"\n                      width=\"40\"\n                    />\n                    {activeStatus && activeStatus === \"current\" && (\n                      <span className=\"online\"></span>\n                    )}\n                  </div>\n                  {receiver && receiver[0] && (\n                    <div className=\"col-5 col-md-7\">\n                      <p\n                        className=\"\"\n                        style={{ fontWeight: \"bold\", lineHeight: \"24px\" }}\n                      >{`${receiver[0].firstName} ${receiver[0].lastName}`}</p>\n                      {getActiveUser()}\n                    </div>\n                  )}\n                  <div className=\"col-4 col-md-4 message-screen-header-icons \">\n                    <PhoneIcon />\n                    <VideocamIcon />\n                    <InfoIcon />\n                  </div>\n                </div>\n              </div>\n              <div className=\"card-body chat-care\">\n                <ul className=\"chat\">\n                  {chat &&\n                    chat.map((msg) => {\n                      return msg.from._id === user._id ? (\n                        <SenderChat\n                          msg={msg}\n                          user={user}\n                          key={msg._id}\n                          socket={socket}\n                          activeStatus={activeStatus}\n                          domain={domain}\n                        />\n                      ) : (\n                        <ReceiverChat\n                          msg={msg}\n                          user={receiver[0]}\n                          key={msg._id}\n                          socket={socket}\n                          activeStatus={activeStatus}\n                          domain={domain}\n                        />\n                      );\n                    })}\n                </ul>\n              </div>\n              {typing && <div className=\"right-align\">typing...</div>}\n              <div className=\"row d-flex align-items-center p-4\">\n                <div className=\"col-2 col-sm-1 \">\n                  <img\n                    src={\n                      user && user.profilePicture\n                        ? user.profilePicture\n                        : \"https://res.cloudinary.com/dueq2a3w1/image/upload/v1608046828/default-image1_w8javi.jpg\"\n                    }\n                    alt=\"\"\n                    className=\"rounded-circle\"\n                    width=\"40\"\n                  />\n                </div>\n                <div className=\"col-9  col-sm-10\">\n                  <form onSubmit={sendMessage}>\n                    <input\n                      type=\"text\"\n                      className=\"form-control feed-input\"\n                      placeholder=\"send message\"\n                      value={message}\n                      onChange={(e) => {\n                        setMessage(e.target.value);\n                        getTyping();\n                      }}\n                    />\n                  </form>\n                </div>\n                <div className=\"col-1\">\n                  <SendIcon onClick={sendMessage} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default MessageScreen;\n","/home/paudel/messenger-clone/src/components/auth/headers.js",[],"/home/paudel/messenger-clone/src/components/People.js",["76"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst People = ({ friend, userId, socket, activeUsers }) => {\n  const [isActive, setIsActive] = useState(false);\n  const history = useHistory();\n  const [msgCount, setMsgCount] = useState(false);\n\n  useEffect(() => {\n    const isUser =\n      activeUsers &&\n      activeUsers.length &&\n      activeUsers.find((user) => user.currentUserId === friend._id);\n\n    if (isUser && isUser.lastActive === \"current\") {\n      setIsActive(true);\n    } else {\n      setIsActive(false);\n    }\n\n    socket.on(\"recentMessage\", (msg) => {\n      // console.log(msg.userId, friend._id);\n      if (msg && msg.userId === friend._id) {\n        setMsgCount(true);\n      }\n    });\n\n    // return function () {\n    //   socket.off(\"getOnlineUsers\");\n    // };\n  }, [friend._id, activeUsers]);\n\n  // console.log(isActive, lastActive);\n  return (\n    <div\n      className=\"row d-flex align-items-center pt-3 pb-3 people-list\"\n      onClick={() => history.push(`/chat/${friend._id}`)}\n    >\n      <div className=\"col-2\">\n        <div className=\"avatar\">\n          <img\n            src={\n              friend.profilePicture\n                ? friend.profilePicture\n                : \"https://res.cloudinary.com/dueq2a3w1/image/upload/v1608046828/default-image1_w8javi.jpg\"\n            }\n            alt=\"\"\n            className=\"rounded-circle\"\n            width=\"40\"\n          />\n        </div>\n        {isActive && <span className=\"online\"></span>}\n      </div>\n      <div className=\"col-8\">{`${friend.firstName} ${friend.lastName}`}</div>\n      {msgCount && (\n        <div className=\"col-2\">\n          <p className=\"msg-count\"></p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default People;\n","/home/paudel/messenger-clone/src/components/PrivateChat.js",["77"],"import React, { useState, useEffect } from \"react\";\nimport ChatHistory from \"./ChatHistory\";\nimport MessageScreen from \"./MessageScreen\";\nimport headers from \"./auth/headers\";\nimport { useParams } from \"react-router-dom\";\nimport Nav from \"./Nav\";\n\nconst PrivateChat = ({ socket, authenticated, setAuthenticated, domain }) => {\n  const [userDetails, setUserDetails] = useState({});\n  // console.log(history);\n  const params = useParams();\n  // console.log(params);\n  const [receiver, setReceiver] = useState([]);\n\n  const [onlineUsers, setOnlineUsers] = useState([]);\n\n  useEffect(() => {\n    const getUserInfo = async () => {\n      try {\n        const response = await fetch(`${domain}/api/user-details`, {\n          mode: \"cors\",\n          headers: headers(),\n        });\n        const res = await response.json();\n        // console.log(res);\n        setUserDetails(res.data || {});\n        getReceiverInfo(res.data);\n        socket.emit(\"connection\", res.data._id);\n        socket.emit(\"getOnlineUsers\", res.data._id);\n        socket.on(\"getOnlineUsers\", (data) => {\n          // console.log(data);\n          setOnlineUsers([...data]);\n        });\n        socket.on(\"connection\", (data) => {\n          console.log(data);\n          setOnlineUsers(data);\n        });\n\n        socket.on(\"disconnectedUser\", (data) => {\n          // console.log(data, \"dis\");\n          // console.log(res.data, \"ou\");\n          socket.emit(\"getOnlineUsers\", res.data._id);\n          socket.on(\"getOnlineUsers\", (userData) => {\n            // console.log(userData);\n            setOnlineUsers(userData);\n          });\n          //   console.log(activeUsers);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getUserInfo();\n    const getReceiverInfo = (user) => {\n      const toUser = user.friends.filter(\n        (friend) => friend._id === params.receiverId\n      );\n      setReceiver(toUser);\n    };\n  }, [params.receiverId]);\n\n  // console.log(params,history, \"params\");\n\n  return (\n    <>\n      <div className=\"container-fluid\">\n        <div className=\"row \">\n          <div\n            className=\"col-md-3 d-none d-lg-block \"\n            style={{ height: \"750px\", padding: \"0 0 0 10px\" }}\n          >\n            <div className=\"Nav pb-3 \">\n              <Nav\n                user={userDetails}\n                authenticated={authenticated}\n                setAuthenticated={setAuthenticated}\n              />\n            </div>\n            <div className=\"chat-history\">\n              <ChatHistory\n                className=\"\"\n                friends={userDetails.friends}\n                socket={socket}\n                userId={userDetails._id}\n                activeUsers={onlineUsers}\n              />\n            </div>\n          </div>\n          <div\n            className=\"col-12 col-md-9 col-lg-6\"\n            style={{ height: \"750px\", padding: \"0\" }}\n          >\n            <MessageScreen\n              receiver={receiver}\n              socket={socket}\n              user={userDetails}\n              activeUsers={onlineUsers}\n              domain={domain}\n            />\n          </div>\n          <div className=\"col-md-3 d-none d-lg-block\">\n            <div className=\"row justify-content-md-center pt-3\">\n              <img\n                src={\n                  userDetails.profilePicture\n                    ? userDetails.profilePicture\n                    : \"https://res.cloudinary.com/dueq2a3w1/image/upload/v1608046828/default-image1_w8javi.jpg\"\n                }\n                alt=\"\"\n                className=\"rounded-circle\"\n                width=\"80\"\n              />\n            </div>\n            <div className=\"row justify-content-md-center pt-3 pb-3 \">\n              <h5\n                style={{ fontWeight: \"bold\" }}\n              >{`${userDetails.firstName} ${userDetails.lastName}`}</h5>\n            </div>\n            <div className=\"row pt-3 pl-3  profile-details\">\n              <p>Customize chat</p>\n            </div>\n            <div className=\"row pt-3 pl-3  profile-details\">\n              <p>Privacy & Support</p>\n            </div>\n            <div className=\"row pt-3 pl-3 profile-details\">\n              <p>Shared Photos</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PrivateChat;\n","/home/paudel/messenger-clone/src/components/Nav.js",["78"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport VideoCallIcon from \"@material-ui/icons/VideoCall\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport \"./Styles.css\";\n\nconst Nav = ({ user, setAuthenticated }) => {\n  const history = useHistory();\n  const logOut = () => {\n    localStorage.removeItem(\"user\");\n    setAuthenticated(false);\n    // window.location = \"/\";\n    history.push(\"/\");\n  };\n  return (\n    <>\n      <div className=\" nav pt-3\">\n        <div className=\"row row d-flex align-items-center\">\n          <div className=\"col-2 col-lg-1\" onClick={() => history.push(\"/\")}>\n            <img\n              src={\n                user.profilePicture\n                  ? user.profilePicture\n                  : \"https://res.cloudinary.com/dueq2a3w1/image/upload/v1608046828/default-image1_w8javi.jpg\"\n              }\n              alt=\"\"\n              className=\"rounded-circle\"\n              width=\"40\"\n            />\n          </div>\n          <div className=\"col-4 col-lg-3 Nav-profile pl-5\">Chats</div>\n          <div\n            className=\"col-5 col-lg-7 Nav-icons pl-5  \"\n            style={{ padding: \"0px\" }}\n          >\n            {/* <MoreHorizIcon /> */}\n            <div className=\"dropdown\">\n              <button\n                class=\"btn dropdown-toggle dropbtn\"\n                type=\"button\"\n                id=\"dropdownMenuButton\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\"\n              ></button>\n              <div className=\"dropdown-content \">\n                <a onClick={logOut}>Logout</a>\n              </div>\n            </div>\n            <VideoCallIcon />\n            <AddCircleIcon />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Nav;\n","/home/paudel/messenger-clone/src/components/SenderChat.js",["79"],"import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport headers from \"./auth/headers\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\n\nconst SenderChat = ({ msg, socket, activeStatus, domain }) => {\n  const [openDropdown, setOpenDropdown] = useState(false);\n  const [deletedMsg, setDeletedMsg] = useState(false);\n  const [deletedForEveryoneMsg, setDeletedForEveryoneMsg] = useState(false);\n  const [msgStatus, setMsgStatus] = useState(\"sent\");\n  const [like, setLike] = useState(false);\n\n  // console.log(msg);\n\n  useEffect(() => {\n    setMsgStatus(msg.messageStatus);\n\n    const changeMessageStatus = async (messageStatus) => {\n      const data = { messageId: msg._id, messageStatus: messageStatus };\n      try {\n        const response = await fetch(`${domain}/api/message-status/edit`, {\n          mode: \"cors\",\n          headers: headers(),\n          method: \"put\",\n          body: JSON.stringify(data),\n        });\n        const res = await response.json();\n        if (res.message) {\n          setMsgStatus(messageStatus);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    if (\n      activeStatus &&\n      activeStatus === \"current\" &&\n      msg.messageStatus === \"sent\"\n    ) {\n      // setMsgStatus(\"delivered\");\n      changeMessageStatus(\"delivered\");\n    }\n    if (msg.deleteForMe === msg.from._id) {\n      setDeletedMsg(true);\n    }\n\n    if (msg.reactors) {\n      setLike(true);\n    }\n\n    if (msg.deleteForEveryone) {\n      setDeletedForEveryoneMsg(true);\n    }\n    socket.on(\"deleteMessage\", (data) => {\n      // console.log(data);\n      if (msg._id === data.messageId) {\n        setDeletedForEveryoneMsg(true);\n      }\n    });\n\n    socket.on(\"likeMessage\", (data) => {\n      // console.log(data);\n      if (msg._id === data.messageId) {\n        setLike(data.like);\n      }\n    });\n  }, [activeStatus]);\n\n  const deleteMsg = async (value) => {\n    let data = {};\n    let url = \"\";\n    // console.log(value);\n    if (value === \"Delete\") {\n      data.deleteForMe = msg.from._id;\n      data.messageId = msg._id;\n      url = `${domain}/api/message/delete`;\n    } else {\n      data.messageId = msg._id;\n      url = `${domain}/api/message/deleteForAll`;\n    }\n\n    try {\n      const response = await fetch(url, {\n        mode: \"cors\",\n        headers: headers(),\n        method: \"post\",\n        body: JSON.stringify(data),\n      });\n      const res = await response.json();\n      // console.log(res);\n      if (res.message && value === \"Delete\") {\n        // console.log(\"inside\");\n        setDeletedMsg(!deletedMsg);\n        setOpenDropdown(!openDropdown);\n      }\n      if (res.message && value === \"Delete for all\") {\n        setDeletedForEveryoneMsg(true);\n        setOpenDropdown(!openDropdown);\n        const details = {\n          messageId: msg._id,\n          toUser: msg.to._id,\n        };\n        socket.emit(\"deleteMessage\", details);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      {!deletedMsg && !deletedForEveryoneMsg && (\n        <li className=\"admin clearfix\" style={{ position: \"relative\" }}>\n          <div\n            className=\"chat-body clearfix admin-chat\"\n            onClick={() => setOpenDropdown(!openDropdown)}\n          >\n            <p>{msg.message}</p>\n            {like && (\n              <div className=\"like-icon\">\n                <FavoriteIcon />{\" \"}\n              </div>\n            )}\n          </div>\n          <span className=\"chat-img  clearfix  mx-2\">\n            {msgStatus === \"received\" && (\n              <img\n                src={\n                  msg.from.profilePicture\n                    ? msg.from.profilePicture\n                    : \"https://res.cloudinary.com/dueq2a3w1/image/upload/v1608046828/default-image1_w8javi.jpg\"\n                }\n                alt=\"\"\n                className=\"rounded-circle\"\n                width=\"20\"\n              />\n            )}\n            {msgStatus === \"delivered\" && <CheckCircleIcon />}\n            {msgStatus === \"sent\" && <CheckCircleOutlineIcon />}\n          </span>\n\n          <div>\n            <small\n              className=\"right text-muted\"\n              style={{ paddingRight: \"40px\" }}\n            >\n              <span className=\"glyphicon glyphicon-time\"></span>{\" \"}\n              {moment.utc(new Date(msg.createdAt)).fromNow()}\n            </small>\n          </div>\n          {openDropdown && (\n            <div className=\"msg-dropdown right clearfix\">\n              <ul>\n                <li onClick={() => deleteMsg(\"Delete\")}>Delete</li>\n                <li onClick={() => deleteMsg(\"Delete for all\")}>\n                  Delete for all\n                </li>\n              </ul>\n            </div>\n          )}\n        </li>\n      )}\n      {deletedForEveryoneMsg && (\n        <li className=\"deletedMsg clearfix dl-admin \">\n          <div className=\"chat-body delete-admin\">\n            <p>This message is deleted</p>\n          </div>\n        </li>\n      )}\n    </>\n  );\n};\n\nexport default SenderChat;\n","/home/paudel/messenger-clone/src/components/ReceiverChat.js",["80","81"],"import moment from \"moment\";\nimport React, { useState, useEffect } from \"react\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport headers from \"./auth/headers\";\n\nconst ReceiverChat = ({ msg, socket,domain }) => {\n  const [deletedMsg, setDeletedMsg] = useState(false);\n  const [deletedForEveryoneMsg, setDeletedForEveryoneMsg] = useState(false);\n  const [like, setLike] = useState(false);\n  console.log(msg);\n  useEffect(() => {\n    if (msg.deleteForMe === msg.from._id) {\n      setDeletedMsg(true);\n    }\n    if (msg.deleteForEveryone) {\n      setDeletedForEveryoneMsg(true);\n    }\n\n    if (msg.reactors) {\n      setLike(true);\n    }\n\n    socket.on(\"deleteMessage\", (data) => {\n      // console.log(data);\n      if (msg._id === data.messageId) {\n        setDeletedForEveryoneMsg(true);\n      }\n    });\n\n    socket.on(\"likeMessage\", (data) => {\n      // console.log(data, \"like\");\n      if (msg._id === data.messageId) {\n        setLike(data.like);\n      }\n    });\n  }, []);\n\n  const likeMessage = async () => {\n    const likeData = {\n      type: \"like\",\n    };\n    const data = {\n      like: !like,\n      from: msg.to._id,\n      to: msg.from._id,\n      messageId: msg._id,\n    };\n    if (!like) {\n      try {\n        const response = await fetch(\n          `${domain}/api/add/message-reactions/${msg._id}`,\n          {\n            method: \"post\",\n            mode: \"cors\",\n            headers: headers(),\n            body: JSON.stringify(likeData),\n          }\n        );\n        const res = await response.json();\n        if (res) {\n          setLike(true);\n          socket.emit(\"likeMessage\", data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      try {\n        const response = await fetch(\n          `${domain}/api/delete/message-reactions/${msg._id}`,\n          {\n            method: \"delete\",\n            mode: \"cors\",\n            headers: headers(),\n          }\n        );\n        const res = await response.json();\n        if (res) {\n          setLike(false);\n          socket.emit(\"likeMessage\", data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return (\n    <>\n      {!deletedForEveryoneMsg && (\n        <li className=\"agent clearfix\">\n          <span className=\"chat-img left clearfix mx-2\">\n            <img\n              src={\n                msg.from.profilePicture\n                  ? msg.from.profilePicture\n                  : \"https://res.cloudinary.com/dueq2a3w1/image/upload/v1608046828/default-image1_w8javi.jpg\"\n              }\n              alt=\"\"\n              className=\"rounded-circle\"\n              width=\"40\"\n            />\n          </span>\n          <div\n            className=\"chat-body clearfix agent-chat\"\n            onDoubleClick={likeMessage}\n          >\n            <p>{msg.message}</p>\n            {like && (\n              <div className=\"like-icon\">\n                <FavoriteIcon />\n              </div>\n            )}\n          </div>\n          <div>\n            <small className=\"left text-muted\">\n              <span className=\"glyphicon glyphicon-time\"></span>\n              {moment.utc(new Date(msg.createdAt)).fromNow()}\n            </small>\n          </div>\n        </li>\n      )}\n      {deletedForEveryoneMsg && (\n        <li className=\"deletedMsg clearfix\">\n          <div className=\"chat-body delete-agent\">\n            <p>This message is deleted</p>\n          </div>\n        </li>\n      )}\n    </>\n  );\n};\n\nexport default ReceiverChat;\n",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":46,"column":6,"nodeType":"88","endLine":46,"endColumn":31,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":14},{"ruleId":"90","severity":1,"message":"94","line":7,"column":10,"nodeType":"92","messageId":"93","endLine":7,"endColumn":16},{"ruleId":"90","severity":1,"message":"95","line":6,"column":10,"nodeType":"92","messageId":"93","endLine":6,"endColumn":14},{"ruleId":"90","severity":1,"message":"96","line":19,"column":25,"nodeType":"92","messageId":"93","endLine":19,"endColumn":41},{"ruleId":"86","severity":1,"message":"97","line":87,"column":6,"nodeType":"88","endLine":87,"endColumn":29,"suggestions":"98"},{"ruleId":"90","severity":1,"message":"99","line":113,"column":15,"nodeType":"92","messageId":"93","endLine":113,"endColumn":29},{"ruleId":"86","severity":1,"message":"100","line":31,"column":6,"nodeType":"88","endLine":31,"endColumn":31,"suggestions":"101"},{"ruleId":"86","severity":1,"message":"102","line":60,"column":6,"nodeType":"88","endLine":60,"endColumn":25,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":46,"column":17,"nodeType":"106","endLine":46,"endColumn":37},{"ruleId":"86","severity":1,"message":"107","line":70,"column":6,"nodeType":"88","endLine":70,"endColumn":20,"suggestions":"108"},{"ruleId":"90","severity":1,"message":"109","line":7,"column":10,"nodeType":"92","messageId":"93","endLine":7,"endColumn":20},{"ruleId":"86","severity":1,"message":"110","line":36,"column":6,"nodeType":"88","endLine":36,"endColumn":8,"suggestions":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'domain'. Either include it or remove the dependency array.","ArrayExpression",["114"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'errors' is assigned a value but never used.","'user' is assigned a value but never used.","'setMessageStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'domain', 'socket', and 'user._id'. Either include them or remove the dependency array.",["115"],"'messageDetials' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["116"],"React Hook useEffect has missing dependencies: 'domain' and 'socket'. Either include them or remove the dependency array.",["117"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'domain', 'msg._id', 'msg.deleteForEveryone', 'msg.deleteForMe', 'msg.from._id', 'msg.messageStatus', 'msg.reactors', and 'socket'. Either include them or remove the dependency array. If 'setMsgStatus' needs the current value of 'msg.messageStatus', you can also switch to useReducer instead of useState and read 'msg.messageStatus' in the reducer.",["118"],"'deletedMsg' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'msg._id', 'msg.deleteForEveryone', 'msg.deleteForMe', 'msg.from._id', 'msg.reactors', and 'socket'. Either include them or remove the dependency array.",["119"],"no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [userDetails._id, socket, domain]",{"range":"132","text":"133"},"Update the dependencies array to be: [receiver, activeUsers, socket, domain, user._id]",{"range":"134","text":"135"},"Update the dependencies array to be: [friend._id, activeUsers, socket]",{"range":"136","text":"137"},"Update the dependencies array to be: [domain, params.receiverId, socket]",{"range":"138","text":"139"},"Update the dependencies array to be: [activeStatus, domain, msg._id, msg.deleteForEveryone, msg.deleteForMe, msg.from._id, msg.messageStatus, msg.reactors, socket]",{"range":"140","text":"141"},"Update the dependencies array to be: [msg._id, msg.deleteForEveryone, msg.deleteForMe, msg.from._id, msg.reactors, socket]",{"range":"142","text":"143"},[1482,1507],"[userDetails._id, socket, domain]",[2391,2414],"[receiver, activeUsers, socket, domain, user._id]",[839,864],"[friend._id, activeUsers, socket]",[1917,1936],"[domain, params.receiverId, socket]",[2010,2024],"[activeStatus, domain, msg._id, msg.deleteForEveryone, msg.deleteForMe, msg.from._id, msg.messageStatus, msg.reactors, socket]",[983,985],"[msg._id, msg.deleteForEveryone, msg.deleteForMe, msg.from._id, msg.reactors, socket]"]